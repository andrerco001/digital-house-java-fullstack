<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Secure authentication with Red Hat AMQ 7.7 and ApacheDS LDAP server</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qwC6toN6kME/" /><category term="Java" /><category term="Linux" /><category term="Security" /><category term="apache artemis" /><category term="apache directory studio" /><category term="apacheds" /><category term="ldap integration" /><category term="red hat amq" /><author><name>Chandra Shekhar Pandey</name></author><id>https://developers.redhat.com/blog/?p=751647</id><updated>2020-08-11T07:00:08Z</updated><published>2020-08-11T07:00:08Z</published><content type="html">&lt;p&gt;In this article, we will integrate &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ 7.7&lt;/a&gt; with the &lt;a target="_blank" rel="nofollow" href="https://directory.apache.org/apacheds/"&gt;ApacheDS&lt;/a&gt; LDAP server. However, any version of the AMQ 7.x series can be integrated with the steps mentioned in this article.&lt;/p&gt; &lt;p&gt;For this example integration, we&amp;#8217;ll use &lt;a target="_blank" rel="nofollow" href="https://directory.apache.org/studio/"&gt;Apache Directory Studio&lt;/a&gt;, which is an LDAP browser and directory client for ApacheDS. You will learn how to set up the ApacheDS LDAP server from scratch, and how to integrate the new LDAP configuration changes that are required in AMQ 7.7. Finally, we&amp;#8217;ll test the integration with an AMQ 7.7 shell-based client, using &lt;a target="_blank" rel="nofollow" href="https://hawt.io"&gt;Hawtio&lt;/a&gt; as a graphical user interface (GUI). This will be helpful to system administrators and developers as they can quickly create a proof of concept for LDAP and AMQ integration. This will help in enabling role-based access control(RBAC) for accessing AMQ 7.7.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Our example is based on &lt;a target="_blank" rel="nofollow" href="https://github.com/apache/activemq-artemis/tree/master/examples/features/standard/security-ldap"&gt;security-ldap&lt;/a&gt;, which shows how to configure and use a secure Java Message Service (JMS) application layer with ActiveMQ Artemis and the ApacheDS LDAP server. This example ships with all AMQ 7.x distributions. I have tested the integration in Fedora 32 and the OpenJDK version of Java 8 (1.8.0_252).&lt;/p&gt; &lt;p&gt;&lt;span id="more-751647"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Part 1: Create the ApacheDS LDAP server with Apache Directory Studio&lt;/h2&gt; &lt;p&gt;The first thing we&amp;#8217;ll do is to create an ApacheDS server instance using Apache Directory Studio:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download &lt;a target="_blank" rel="nofollow" href="https://directory.apache.org/studio/"&gt;Apache Directory Studio&lt;/a&gt; and unzip it.&lt;/li&gt; &lt;li&gt;Once it has been extracted, from the Linux terminal execute &lt;code&gt;ApacheDirectoryStudio/ApacheDirectoryStudio&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Create the LDAP server by selecting &lt;b&gt;New Server -&amp;#62;Finish&lt;/b&gt;, as shown in Figure 1. &lt;p&gt;&lt;div id="attachment_751687" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1.png"&gt;&lt;img aria-describedby="caption-attachment-751687" class="wp-image-751687 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1-1024x576.png" alt="Dialog to create a new LDAP server." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-1-1.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751687" class="wp-caption-text"&gt;Figure 1: Create the new LDAP server in Apache Directory Studio.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Set up the new LDAP server&lt;/h3&gt; &lt;p&gt;Before we start the server, we have the option to change its port. Right-click on the server and select &lt;b&gt;Open Configuration&lt;/b&gt;. I&amp;#8217;ve kept the default port. You can use &lt;b&gt;Ctrl+S&lt;/b&gt; to save any changes that you make.&lt;/p&gt; &lt;div id="attachment_751707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1.png"&gt;&lt;img aria-describedby="caption-attachment-751707" class="wp-image-751707 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1-1024x576.png" alt="Dialog to change the LDAP server port." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-2-1.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751707" class="wp-caption-text"&gt;Figure 2: Change the LDAP server port.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click the &lt;b&gt;Run&lt;/b&gt; button at the bottom left of this screen to start the LDAP server.&lt;/p&gt; &lt;h3&gt;Create a new connection&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll create a new connection, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_751717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3.png"&gt;&lt;img aria-describedby="caption-attachment-751717" class="wp-image-751717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3-1024x576.png" alt="Dialog to create a new LDAP connection." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-3.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751717" class="wp-caption-text"&gt;Figure 3: Create a new LDAP connection.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After creating the connection, you will observe a directory tree in the LDAP browser. The tree is shown in the left-side panel in Figure 4.&lt;/p&gt; &lt;div id="attachment_751727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4.png"&gt;&lt;img aria-describedby="caption-attachment-751727" class="wp-image-751727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4-1024x576.png" alt="The new directory tree in the LDAP browser window." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-4.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751727" class="wp-caption-text"&gt;Figure 4: The directory tree in the LDAP browser.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create a server partition&lt;/h3&gt; &lt;p&gt;Next, we want to import the &lt;a target="_blank" rel="nofollow" href="https://github.com/apache/activemq-artemis/blob/master/examples/features/standard/security-ldap/src/main/resources/example.ldif"&gt;example.ldif&lt;/a&gt; file from the &lt;code&gt;security-ldap&lt;/code&gt; example. Before doing that, we have to create a partition.&lt;/p&gt; &lt;p&gt;Right-click on the LDAP server and select &lt;b&gt;Open Configuration&lt;/b&gt; to open the Partitions tab, which is shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_751737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5.png"&gt;&lt;img aria-describedby="caption-attachment-751737" class="wp-image-751737 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5-1024x576.png" alt="The partitions tab." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-5.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751737" class="wp-caption-text"&gt;Figure 5: The Partitions tab.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 6 shows the dialog to add a new partition. Enter &lt;b&gt;activemq&lt;/b&gt; as the partition ID with the suffix of &lt;b&gt;dc=activemq,dc=org&lt;/b&gt;. Enter &lt;b&gt;Ctrl+S&lt;/b&gt; to save your changes.&lt;/p&gt; &lt;div id="attachment_751747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6.png"&gt;&lt;img aria-describedby="caption-attachment-751747" class="wp-image-751747 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6-1024x576.png" alt="Dialog to add a new partition." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-6.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751747" class="wp-caption-text"&gt;Figure 6: The dialog to add a new partition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you want to see the reflected changes, try the &lt;b&gt;F5&lt;/b&gt; key.&lt;/p&gt; &lt;h3&gt;Import example.ldif&lt;/h3&gt; &lt;p&gt;Now, we are ready to import the &lt;code&gt;example.ldif&lt;/code&gt; file, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_751767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7.png"&gt;&lt;img aria-describedby="caption-attachment-751767" class="wp-image-751767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7-1024x576.png" alt="Dialog to import the LDIF file." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-7.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751767" class="wp-caption-text"&gt;Figure 7: Import the &lt;code&gt;example.ldif&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 8 shows the import configurations for the file.&lt;/p&gt; &lt;div id="attachment_751777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8.png"&gt;&lt;img aria-describedby="caption-attachment-751777" class="wp-image-751777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8-1024x576.png" alt="Dialog to configure the LDIF connection and import file." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-8.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751777" class="wp-caption-text"&gt;Figure 8: Import configurations for the &lt;code&gt;example.ldif&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To complete the import, stop the LDAP server and start it again so that the changes are reflected. After restarting, you will see that the &lt;code&gt;example.ldif&lt;/code&gt; file has uploaded, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_751787" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9.png"&gt;&lt;img aria-describedby="caption-attachment-751787" class="wp-image-751787 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9-1024x576.png" alt="A screenshot of the LDIF file in the LDAP browser." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-9.png 1366w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751787" class="wp-caption-text"&gt;Figure 9: Check that the new &lt;code&gt;example.ldif&lt;/code&gt; file has uploaded.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the LDAP server connection&lt;/h3&gt; &lt;p&gt;We&amp;#8217;re almost done setting up the LDAP server. Our last step is to test the LDAP server connection. The following command requests a search for the user &lt;code&gt;andrew&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ ldapsearch -H ldap://localhost:10390 -x -b "uid=andrew,dc=activemq,dc=org"|less &lt;/pre&gt; &lt;p&gt;The output provides the following user details, which also ensures that LDAP connectivity is fine:&lt;/p&gt; &lt;pre&gt;# extended LDIF # # LDAPv3 # base &amp;#38;amp;lt;uid=andrew,dc=activemq,dc=org&amp;#38;amp;gt; with scope subtree # filter: (objectclass=*) # requesting: ALL # # andrew, activemq.org dn: uid=andrew,dc=activemq,dc=org objectClass: top objectClass: simpleSecurityObject objectClass: account userPassword:: e1NTSEF9RnQzOGppd3pKVWUwWElsN0VBbm5aQWUxTXJCOWlBUWg0YTRkM2c9PQ= = uid: andrew # search result search: 2 result: 0 Success # numResponses: 2 # numEntries: 1&lt;/pre&gt; &lt;h2&gt;Part 2: Integrate AMQ 7.7 with ApacheDS&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll integrate AMQ 7.7 with the ApacheDS LDAP server. I&amp;#8217;ll also guide you through the required configuration changes for AMQ 7.7.&lt;/p&gt; &lt;h3&gt;Download and install AMQ 7.7&lt;/h3&gt; &lt;p&gt;To start, we&amp;#8217;ll download and install AMQ 7.7.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download AMQ 7.7 from the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=jboss.amq.broker"&gt;Red Hat download portal&lt;/a&gt;. Alternatively, you could download the latest version of &lt;a target="_blank" rel="nofollow" href="https://activemq.apache.org/components/artemis/download/"&gt;Apache Artemis&lt;/a&gt;, which is the AMQ community distribution.&lt;/li&gt; &lt;li&gt;Unzip the distribution that you have selected. Create a new folder &lt;code&gt;AMQ_INSTANCE_770&lt;/code&gt; alongside the extracted distribution.&lt;/li&gt; &lt;li&gt;Change the directory to &lt;code&gt;AMQ_INSTANCE_770&lt;/code&gt; and create an AMQ Broker instance called &lt;code&gt;brokerInstanceldap&lt;/code&gt;: &lt;pre&gt;$ ../amq-broker-7.7.0/bin/artemis create brokerInstanceldap Creating ActiveMQ Artemis instance at: /home/chandrashekhar/Development/AMQ_RH/AMQ_INSTANCE_770/brokerInstanceldap --user: is a mandatory property! Please provide the default username: admin --password: is mandatory with this configuration: Please provide the default password: --allow-anonymous | --require-login: is a mandatory property! Allow anonymous access?, valid values are Y,N,True,False Y Auto tuning journal ... done! Your system can make 5.68 writes per millisecond, your journal-buffer-timeout will be 176000 &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Configure the new AMQ 7.7 instance&lt;/h3&gt; &lt;p&gt;You will find the complete configuration in the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/tree/master/ldapIntegration"&gt;Git repository for this article&lt;/a&gt;. Enter the following to clone this repository and get the files that you need:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/1984shekhar/Artemis_POC &lt;/pre&gt; &lt;p&gt;Copy these files from the Git repository into your &lt;code&gt;AMQ_INSTANCE_770/brokerInstanceldap/etc&lt;/code&gt; folder:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/blob/master/ldapIntegration/etc/artemis.profile"&gt;artemis.profile&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/blob/master/ldapIntegration/etc/broker.xml"&gt;broker.xml&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/blob/master/ldapIntegration/etc/logging.properties"&gt;logging.properties&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/blob/master/ldapIntegration/etc/login.config"&gt;login.config&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/blob/master/ldapIntegration/etc/management.xml"&gt;management.xml&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The broker configuration files are located in the &lt;code&gt;Artemis_POC/ldapIntegration/etc&lt;/code&gt; folder. You can also find them &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Artemis_POC/tree/master/ldapIntegration/etc"&gt;in the Git repository&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Configuration details&lt;/h4&gt; &lt;p&gt;See the following files for the configuration details:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;login.config&lt;/code&gt; file has the LDAP server integration details.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;broker.xml&lt;/code&gt; file has security settings. These settings allow the roles of &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;europe-user&lt;/code&gt;,  &lt;code&gt;news-user&lt;/code&gt;, and &lt;code&gt;us-user&lt;/code&gt; to access, produce, and consume to and from various queues, which are also listed in the file.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;example.ldif&lt;/code&gt; file holds the definition of the LDAP server roles and their associated users and passwords.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Additional configurations&lt;/h4&gt; &lt;p&gt;In addition to the LDAP server roles, we have to define a special role to access Hawtio, which we do in the &lt;code&gt;artemis.profile&lt;/code&gt; configuration. In this case, we replace the default of &lt;code&gt;amq&lt;/code&gt; with &lt;code&gt;-Dhawtio.role=user&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We also want to configure the LDAP server operations for verbose logging, so we set the following in the &lt;code&gt;logging.properties&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;loggers=[default entries],org.apache.activemq.artemis.spi.core.security logger.org.apache.activemq.artemis.spi.core.security.level=DEBUG &lt;/pre&gt; &lt;p&gt;Also, note that the Hawtio GUI uses the &lt;a target="_blank" rel="nofollow" href="https://www.baeldung.com/java-management-extensions"&gt;Java Management Extensions&lt;/a&gt; (JMX) framework for various operations. So, we also have to provide role-based access control (RBAC) configurations for JMX. You will find the following RBAC config in the &lt;code&gt;management.xml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&amp;#60;match domain="org.apache.activemq.artemis"&amp;#62; &amp;#60;access method="list*" roles="amq,user"/&amp;#62; &amp;#60;access method="get*" roles="amq,user"/&amp;#62; &amp;#60;access method="is*" roles="amq,user"/&amp;#62; &amp;#60;access method="set*" roles="amq,user"/&amp;#62; &amp;#60;access method="*" roles="amq,user"/&amp;#62; &amp;#60;/match&amp;#62; &lt;/pre&gt; &lt;h2&gt;Part 3: Test the LDAP integration with AMQ 7.7&lt;/h2&gt; &lt;p&gt;Our final step is to test the integration.&lt;/p&gt; &lt;p&gt;Assuming that the configuration files are copied in the &lt;code&gt;Artemis_POC/ldapIntegration/etc&lt;/code&gt; folder, enter the following command to start the broker:&lt;/p&gt; &lt;pre&gt;$ ./artemis run &lt;/pre&gt; &lt;p&gt;In a different Linux terminal, send and receive messages with the following commands:&lt;/p&gt; &lt;pre&gt;$ ./artemis producer --user andrew --password activemq1 --destination queue://news.europe.europeTopic --message-count 1 Connection brokerURL = tcp://localhost:61616 Producer ActiveMQQueue[news.europe.europeTopic], thread=0 Started to calculate elapsed time ... Producer ActiveMQQueue[news.europe.europeTopic], thread=0 Produced: 1 messages Producer ActiveMQQueue[news.europe.europeTopic], thread=0 Elapsed time in second : 0 s Producer ActiveMQQueue[news.europe.europeTopic], thread=0 Elapsed time in milli second : 87 milli seconds $ $ ./artemis consumer --user frank --password activemq2 --destination queue://news.europe.europeTopic --message-count 1 Connection brokerURL = tcp://localhost:61616 Consumer:: filter = null Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 wait until 1 messages are consumed Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 Consumed: 1 messages Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 Elapsed time in second : 0 s Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 Elapsed time in milli second : 27 milli seconds Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 Consumed: 1 messages Consumer ActiveMQQueue[news.europe.europeTopic], thread=0 Consumer thread finished $ $ ./artemis producer --user frank --password activemq2 --destination queue://news.europe.europeTopic --message-count 1 Connection brokerURL = tcp://localhost:61616 Producer ActiveMQQueue[news.europe.europeTopic], thread=0 Started to calculate elapsed time ... javax.jms.JMSSecurityException: AMQ229032: User: frank does not have permission='SEND' on address news.europe.europeTopic at org.apache.activemq.artemis.core.protocol.core.impl.ChannelImpl.sendBlocking(ChannelImpl.java:467) at org.apache.activemq.artemis.core.protocol.core.impl.ChannelImpl.sendBlocking(ChannelImpl.java:361) at org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQSessionContext.sendFullMessage(ActiveMQSessionContext.java:552) at org.apache.activemq.artemis.core.client.impl.ClientProducerImpl.sendRegularMessage(ClientProducerImpl.java:296) at org.apache.activemq.artemis.core.client.impl.ClientProducerImpl.doSend(ClientProducerImpl.java:268) at org.apache.activemq.artemis.core.client.impl.ClientProducerImpl.send(ClientProducerImpl.java:143) at org.apache.activemq.artemis.core.client.impl.ClientProducerImpl.send(ClientProducerImpl.java:125) at org.apache.activemq.artemis.jms.client.ActiveMQMessageProducer.doSendx(ActiveMQMessageProducer.java:483) at org.apache.activemq.artemis.jms.client.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:193) at org.apache.activemq.artemis.cli.commands.messages.ProducerThread.sendMessage(ProducerThread.java:125) at org.apache.activemq.artemis.cli.commands.messages.ProducerThread.run(ProducerThread.java:91) Caused by: ActiveMQSecurityException[errorType=SECURITY_EXCEPTION message=AMQ229032: User: frank does not have permission='SEND' on address news.europe.europeTopic] ... 11 more &lt;/pre&gt; &lt;p&gt;Now, browse to the console login (&lt;b&gt;http://localhost:8161/console/login&lt;/b&gt;) and enter the user name &lt;b&gt;andrew&lt;/b&gt; and the password &lt;b&gt;activemq1&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;You should now be able to send a message through the Hawtio GUI, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_751907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10.png"&gt;&lt;img aria-describedby="caption-attachment-751907" class="wp-image-751907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10-1024x418.png" alt="A screenshot of the Hawtio user interface with the option to send a message." width="640" height="261" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10-1024x418.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10-300x123.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10-768x314.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ldap-10.png 1359w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751907" class="wp-caption-text"&gt;Figure 10: Send a message via the Hawtio GUI.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Sending the message verifies that the integration is complete.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope that you liked this article and that it has helped you to better understand LDAP authentication with Red Hat AMQ 7.x and Apache ActiveMQ Artemis.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#38;linkname=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F11%2Fsecure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server%2F&amp;#038;title=Secure%20authentication%20with%20Red%20Hat%20AMQ%207.7%20and%20ApacheDS%20LDAP%20server" data-a2a-url="https://developers.redhat.com/blog/2020/08/11/secure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server/" data-a2a-title="Secure authentication with Red Hat AMQ 7.7 and ApacheDS LDAP server"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/11/secure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server/"&gt;Secure authentication with Red Hat AMQ 7.7 and ApacheDS LDAP server&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qwC6toN6kME" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, we will integrate Red Hat AMQ 7.7 with the ApacheDS LDAP server. However, any version of the AMQ 7.x series can be integrated with the steps mentioned in this article. For this example integration, we&amp;#8217;ll use Apache Directory Studio, which is an LDAP browser and directory client for ApacheDS. You will learn [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/11/secure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server/"&gt;Secure authentication with Red Hat AMQ 7.7 and ApacheDS LDAP server&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/11/secure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">751647</post-id><dc:creator>Chandra Shekhar Pandey</dc:creator><dc:date>2020-08-11T07:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/11/secure-authentication-with-red-hat-amq-7-7-and-apacheds-ldap-server/</feedburner:origLink></entry><entry><title>Byteman 4.0.13 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/w7UQWT61yiE/byteman-4013-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_13_has_been_released</id><updated>2020-08-10T12:26:00Z</updated><published>2020-08-10T12:26:00Z</published><content type="html">&lt;p&gt;Byteman 4.0.13 is now available from the &lt;a href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.13 is a maintenance release which updates Byteman to work with the latest JDK releases including JDK16. More details are provided in the &lt;a href="http://downloads.jboss.org/byteman/latest/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;. &lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/w7UQWT61yiE" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.13 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.13 is a maintenance release which updates Byteman to work with the latest JDK releases including JDK16. More details are provided in the Release No...</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2020-08-10T12:26:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2020/08/byteman-4013-has-been-released.html</feedburner:origLink></entry><entry><title>Kubernetes and the hybrid cloud with Skupper</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2fdifZO5DD0/" /><category term="DevNation" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="amazon web services" /><category term="google cloud platform" /><category term="hybrid cloud" /><category term="Microsoft Azure" /><category term="Skupper" /><author><name>Ted Ross</name></author><id>https://developers.redhat.com/blog/?p=763047</id><updated>2020-08-10T07:00:17Z</updated><published>2020-08-10T07:00:17Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about Kubernetes and the hybrid cloud with Skupper from &lt;a href="https://developers.redhat.com/blog/author/rossted/"&gt;Ted Ross&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Watch as we conduct a live demonstration by using Skupper to set up hybrid cloud-native Java &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt; distributed across Amazon Web Services, Google Cloud Platform, and Microsoft Azure, with real-time load balancing and fail-over.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/2ax0CDyKg4U?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#38;linkname=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F10%2Fkubernetes-and-the-hybrid-cloud-with-skupper%2F&amp;#038;title=Kubernetes%20and%20the%20hybrid%20cloud%20with%20Skupper" data-a2a-url="https://developers.redhat.com/blog/2020/08/10/kubernetes-and-the-hybrid-cloud-with-skupper/" data-a2a-title="Kubernetes and the hybrid cloud with Skupper"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/10/kubernetes-and-the-hybrid-cloud-with-skupper/"&gt;Kubernetes and the hybrid cloud with Skupper&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2fdifZO5DD0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about Kubernetes and the hybrid cloud with Skupper from Ted Ross and Burr Sutter. Watch as we conduct a live demonstration [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/10/kubernetes-and-the-hybrid-cloud-with-skupper/"&gt;Kubernetes and the hybrid cloud with Skupper&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/10/kubernetes-and-the-hybrid-cloud-with-skupper/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">763047</post-id><dc:creator>Ted Ross</dc:creator><dc:date>2020-08-10T07:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/10/kubernetes-and-the-hybrid-cloud-with-skupper/</feedburner:origLink></entry><entry><title>Reactive Quarkus: A Java Mutiny</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c2rwWDwBazc/" /><category term="DevNation" /><category term="Event-Driven" /><category term="Java" /><category term="Microservices" /><category term="Quarkus" /><category term="Concurrency" /><category term="distributed systems" /><category term="non-blocking" /><category term="reactive applications" /><category term="reactive programming" /><author><name>Clement Escoffier</name></author><id>https://developers.redhat.com/blog/?p=762517</id><updated>2020-08-07T08:55:45Z</updated><published>2020-08-07T08:55:45Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about reactive &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/"&gt;Mutiny&lt;/a&gt; from &lt;a href="https://developers.redhat.com/blog/author/cescoffier/"&gt;Clement Escoffier&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/yanaga/"&gt;Edson Yanaga&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;First things first: How much confusion has been caused by the word &lt;em&gt;reactive&lt;/em&gt;? Are we talking about &lt;em&gt;reactive systems&lt;/em&gt;? &lt;em&gt;Reactive programming&lt;/em&gt;? &lt;em&gt;Reactive streams&lt;/em&gt;? Also, how many headaches have been caused by non-seasoned reactive developers trying to read reactive code?&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s make some sense out of this issue. In this talk, we introduce Mutiny, a new &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Reactive_programming"&gt;reactive programming&lt;/a&gt; library. After several years of observing developers using reactive APIs, we designed this library to be more &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt;, navigable, and to avoid the common pitfalls of reactive programming. This talk explores the reason behind Mutiny and how it simplifies the development of reactive applications. We also explain how Mutiny is integrated into Quarkus to build supersonic, subatomic, and reactive applications.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/kWlrGtwvOxg?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#038;title=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" data-a2a-url="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/" data-a2a-title="Reactive Quarkus: A Java Mutiny"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/"&gt;Reactive Quarkus: A Java Mutiny&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c2rwWDwBazc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about reactive Quarkus and Mutiny from Clement Escoffier and Edson Yanaga. First things first: How much confusion has been caused by [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/"&gt;Reactive Quarkus: A Java Mutiny&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">762517</post-id><dc:creator>Clement Escoffier</dc:creator><dc:date>2020-08-07T08:55:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/</feedburner:origLink></entry><entry><title>A deep dive into Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o816JN06KYI/" /><category term="DevNation" /><category term="Linux" /><category term="Open source" /><category term="Security" /><category term="access management" /><category term="keycloak" /><category term="middleware" /><category term="OpenID" /><category term="openldap" /><author><name>Stian Thorgersen</name></author><id>https://developers.redhat.com/blog/?p=762337</id><updated>2020-08-07T07:01:53Z</updated><published>2020-08-07T07:01:53Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; from &lt;a href="https://developers.redhat.com/blog/author/stianth/"&gt;Stian Thorgersen&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Keycloak is an open source identity and access management solution for modern applications and services. You might already be familiar with it and are curious about its capabilities and features, but if you aren&amp;#8217;t, don&amp;#8217;t worry. In this video tutorial, we&amp;#8217;ll give you a great introduction to Keycloak and go through most of the capabilities and features that help you secure your applications and services. You&amp;#8217;ll discover how to easily enable two-factor authentication, integrate with external user stores like &lt;a target="_blank" rel="nofollow" href="https://www.openldap.org/"&gt;LDAP&lt;/a&gt;, delegate authentication to other identity providers, and use many more of the other cool and useful features Keycloak brings to the table.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/ZxpY_zZ52kU?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#038;title=A%20deep%20dive%20into%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/" data-a2a-title="A deep dive into Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;A deep dive into Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o816JN06KYI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about Keycloak from Stian Thorgersen and Burr Sutter. Keycloak is an open source identity and access management solution for modern applications [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;A deep dive into Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">762337</post-id><dc:creator>Stian Thorgersen</dc:creator><dc:date>2020-08-07T07:01:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/</feedburner:origLink></entry><entry><title>JGroups 5.0.0.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6cSfvDSRK2Y/jgroups-500final-released.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-jgroups_5_0_0_final_released</id><updated>2020-08-06T08:06:12Z</updated><published>2020-08-06T08:06:00Z</published><content type="html">&lt;div&gt;I'm happy to announce that JGroups 5.0.0.Final has been released!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new features are described in [1]. Below's a list of the major JIRAs:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2218"&gt;https://issues.redhat.com/browse/JGRP-2218&lt;/a&gt;: this is the most important change in 5.0.0: it changes Message into an interface and allows for different implementations of Message&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2450"&gt;https://issues.redhat.com/browse/JGRP-2450&lt;/a&gt;: support for virtual threads (fibers). If the JDK (probably 16 and higher) supports virtual threads, then they can be enabled by setting use_fibers to true in the transport. This will effectively bypass the thread pool(s) and use virtual threads instead. See [2] for details.&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2451"&gt;https://issues.redhat.com/browse/JGRP-2451&lt;/a&gt;: FD_ALL3 is a more efficient failure detection protocol; counts messages received from P as heartbeats, and P suppresses heartbeats when sending messages. This should reduce traffic on the network&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2462"&gt;https://issues.redhat.com/browse/JGRP-2462&lt;/a&gt;: implementation of Random Early Drop (RED) protocol, which starts dropping messages on the send side when the queue becomes full. This prevents message storms (by unneeded retransmission requests when messages are not received) and/or blocking&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2402"&gt;https://issues.redhat.com/browse/JGRP-2402&lt;/a&gt;: new protocol SOS to captures vital stats and dump them to a file periodically&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2401"&gt;https://issues.redhat.com/browse/JGRP-2401&lt;/a&gt;: versioned configuration. Stacks won't start if the versions of JGroups and the configuration differ (not for micro versions). This prevents use of old/outdated configurations with a newer JGroups release&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2476"&gt;https://issues.redhat.com/browse/JGRP-2476&lt;/a&gt;: more efficient marshalling of classes. Reduces size of RPCs in RpcDispatcher&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;The documentation can be found at [3].&lt;/div&gt;&lt;div&gt;Enjoy!&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a href="http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html"&gt;http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] &lt;a href="http://belaban.blogspot.com/2020/07/double-your-performance-virtual-threads.html"&gt;http://belaban.blogspot.com/2020/07/double-your-performance-virtual-threads.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] &lt;a href="http://www.jgroups.org/manual5/index.html"&gt;http://www.jgroups.org/manual5/index.html&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6cSfvDSRK2Y" height="1" width="1" alt=""/&gt;</content><summary>I'm happy to announce that JGroups 5.0.0.Final has been released! The new features are described in [1]. Below's a list of the major JIRAs: https://issues.redhat.com/browse/JGRP-2218: this is the most important change in 5.0.0: it changes Message into an interface and allows for different implementations of Message https://issues.redhat.com/browse/JGRP-2450: support for virtual threads (fibers). I...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2020-08-06T08:06:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2020/08/jgroups-500final-released.html</feedburner:origLink></entry><entry><title>Monitoring .NET Core applications on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UwQZnMiqjfY/" /><category term=".NET" /><category term="Kubernetes" /><category term="Microservices" /><category term="Operator" /><category term="metrics .NET Core" /><category term="openshift" /><category term="prometheus .NET Core" /><category term="prometheus kubernetes" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=728067</id><updated>2020-08-05T07:00:32Z</updated><published>2020-08-05T07:00:32Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is an open source monitoring solution that collects metrics from the system and its applications. As a developer, you can query these metrics and use them to create alerts, which you can use as a source for dashboards. One example would be using Prometheus metrics with &lt;a target="_blank" rel="nofollow" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, I show you how to use Prometheus to monitor a &lt;a href="https://developers.redhat.com/topics/dotnet/"&gt;.NET Core&lt;/a&gt; application running on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. Note that installation instructions are not included with the article. I do include a reference for using the Prometheus &lt;a href="https://developers.redhat.com/topics/kubernetes/operators/"&gt;Operator&lt;/a&gt; to create and configure Prometheus on Kubernetes.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Learn more about Prometheus&amp;#8217; support for &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html#creating-alerting-rules_monitoring-your-own-services"&gt;monitoring Kubernetes and containerized applications&lt;/a&gt; deployed on OpenShift.&lt;/p&gt; &lt;h2&gt;Open source monitoring with Prometheus&lt;/h2&gt; &lt;p&gt;Prometheus organizes data in a &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Time_series"&gt;time series&lt;/a&gt;. This type of data graph is useful for tracking how a numeric value changes over time. Prometheus then uses the time series to track the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Counters&lt;/b&gt;: Values that can only increment, like the number of requests handled.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Gauges&lt;/b&gt;: Values that can go up and down, like memory used.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Histograms&lt;/b&gt;: Values that are counted in a number of buckets, like response time.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A single metric (like HTTP response time) corresponds to multiple time series that have a unique set of labels. Thanks to these labels, you can filter queries for specific criteria, such as the HTTP response time for a particular URL.&lt;/p&gt; &lt;h2&gt;Deploying Prometheus&lt;/h2&gt; &lt;p&gt;You can use the &lt;a target="_blank" rel="nofollow" href="https://github.com/coreos/prometheus-operator"&gt;Prometheus Operator&lt;/a&gt; to create and configure Prometheus on Kubernetes. To set up this example, I started by creating a project with a user that has monitoring permissions. I followed the steps described in &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html"&gt;&lt;i&gt;Monitoring your own services&lt;/i&gt;&lt;/a&gt; to create the project and user.&lt;/p&gt; &lt;h2&gt;Exposing metrics from .NET Core&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;a target="_blank" rel="nofollow" href="https://github.com/prometheus-net/prometheus-net"&gt;prometheus-net&lt;/a&gt; library to expose metrics from .NET Core. This library includes a package for monitoring .NET Core, and a separate package for monitoring ASP.NET Core. The ASP.NET Core monitoring package includes additional metrics related to the web server.&lt;/p&gt; &lt;p&gt;As described in the &lt;code&gt;prometheus-net&lt;/code&gt; &lt;a target="_blank" rel="nofollow" href="https://github.com/prometheus-net/prometheus-net"&gt;README&lt;/a&gt;, we need to include the &lt;code&gt;prometheus-net.AspNetCore&lt;/code&gt; package:&lt;/p&gt; &lt;pre&gt;&amp;#60;ItemGroup&amp;#62; &amp;#60;PackageReference Include="prometheus-net.AspNetCore" Version="3.5.0" /&amp;#62; &amp;#60;/ItemGroup&amp;#62; &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll add an endpoint that Prometheus will use to retrieve the metrics:&lt;/p&gt; &lt;pre&gt;app.UseEndpoints(endpoints =&amp;#62; { // ... endpoints.MapMetrics(); }; &lt;/pre&gt; &lt;p&gt;Finally, we enable capturing the HTTP metrics:&lt;/p&gt; &lt;pre&gt;public void Configure(IApplicationBuilder app, ...) { // ... app.UseRouting(); app.UseHttpMetrics(); // ... } &lt;/pre&gt; &lt;p&gt;We&amp;#8217;ll deploy this application on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, and make it accessible from outside the cluster:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet:3.1~https://github.com/redhat-developer/s2i-dotnetcore-ex#dotnetcore-3.1-monitor --context-dir app $ oc expose service s2i-dotnetcore-ex &lt;/pre&gt; &lt;p&gt;Now that our application is up and running, we can have a look at the HTTP endpoint that is used by Prometheus at the &lt;code&gt;/metrics&lt;/code&gt; path. Notice the different gauges, counters, and histograms exposed by the ASP.NET Core application:&lt;/p&gt; &lt;pre&gt;# HELP process_private_memory_bytes Process private memory size # TYPE process_private_memory_bytes gauge process_private_memory_bytes 383516672 # HELP process_working_set_bytes Process working set # TYPE process_working_set_bytes gauge process_working_set_bytes 229879808 # HELP http_requests_in_progress The number of requests currently in progress in the ASP.NET Core pipeline. One series without controller/action label values counts all in-progress requests, with separate series existing for each controller-action pair. # TYPE http_requests_in_progress gauge http_requests_in_progress{method="GET",controller="",action=""} 1 http_requests_in_progress{method="POST",controller="Home",action="Index"} 0 http_requests_in_progress{method="GET",controller="Home",action="Index"} 0 # HELP http_requests_received_total Provides the count of HTTP requests that have been processed by the ASP.NET Core pipeline. # TYPE http_requests_received_total counter http_requests_received_total{code="200",method="POST",controller="Home",action="Index"} 1 http_requests_received_total{code="200",method="GET",controller="Home",action="Index"} 1288 http_requests_received_total{code="200",method="GET",controller="",action=""} 4944 # HELP http_request_duration_seconds The duration of HTTP requests processed by an ASP.NET Core application. # TYPE http_request_duration_seconds histogram http_request_duration_seconds_sum{code="200",method="GET",controller="Home",action="Index"} 0.5861144999999994 http_request_duration_seconds_count{code="200",method="GET",controller="Home",action="Index"} 1288 http_request_duration_seconds_bucket{code="200",method="GET",controller="Home",action="Index",le="0.001"} 1262 ... http_request_duration_seconds_bucket{code="200",method="GET",controller="Home",action="Index",le="+Inf"} 1288 http_request_duration_seconds_sum{code="200",method="GET",controller="",action=""} 8.691159999999982 http_request_duration_seconds_count{code="200",method="GET",controller="",action=""} 4944 ... &lt;/pre&gt; &lt;p&gt;You can see metrics for memory like the &lt;code&gt;process_working_set_bytes&lt;/code&gt; gauge. You can also see &lt;code&gt;http_request_duration_seconds&lt;/code&gt; that exposes a histogram for the request duration. The &lt;code&gt;process_working_set_bytes&lt;/code&gt; metric has time series per &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;controller&lt;/code&gt;, and &lt;code&gt;action&lt;/code&gt;. This lets us filter based on those labels. The histogram data is in the &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric, which defines buckets using the &lt;code&gt;le&lt;/code&gt; (less or equal) label. The histogram also includes a &lt;code&gt;*_count&lt;/code&gt; and &lt;code&gt;*_sum&lt;/code&gt; metric.&lt;/p&gt; &lt;h2&gt;Monitoring the .NET application&lt;/h2&gt; &lt;p&gt;Now, we need to configure metrics collection for the .NET application. We do this on OpenShift by adding a &lt;code&gt;PodMonitor&lt;/code&gt; or &lt;code&gt;ServiceMonitor&lt;/code&gt; configuration to the namespace. The OpenShift Prometheus Operator picks up these resources and configures monitoring.&lt;/p&gt; &lt;p&gt;Next, let’s look at the service we’ve deployed. We&amp;#8217;ll use this information to configure the &lt;code&gt;ServiceMonitor&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc get service s2i-dotnetcore-ex -o yaml apiVersion: v1 kind: Service metadata: annotations: openshift.io/generated-by: OpenShiftNewApp creationTimestamp: 2020-05-08T11:48:02Z labels: app: s2i-dotnetcore-ex name: s2i-dotnetcore-ex namespace: demoproject resourceVersion: "22076" selfLink: /api/v1/namespaces/demoproject/services/s2i-dotnetcore-ex uid: 2aa94ebe-2384-4544-bcbe-b8283bd2db60 spec: clusterIP: 172.30.35.187 ports: - name: 8080-tcp port: 8080 protocol: TCP targetPort: 8080 selector: app: s2i-dotnetcore-ex deploymentconfig: s2i-dotnetcore-ex sessionAffinity: None type: ClusterIP status: loadBalancer: {} &lt;/pre&gt; &lt;h3&gt;Configure the ServiceMonitor&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll add a &lt;code&gt;ServiceMonitor&lt;/code&gt; that matches the &lt;code&gt;app: s2i-dotnetcore-ex&lt;/code&gt; label, &lt;code&gt;name: 8080-tcp&lt;/code&gt; port, and &lt;code&gt;namespace: demoproject&lt;/code&gt; namespace from the service configuration.&lt;/p&gt; &lt;p&gt;First, we create an &lt;code&gt;example-app-service-monitor.yaml&lt;/code&gt; file with the following content:&lt;/p&gt; &lt;pre&gt;apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: labels: k8s-app: prometheus-example-monitor name: prometheus-example-monitor namespace: demoproject spec: endpoints: - interval: 30s port: 8080-tcp scheme: http selector: matchLabels: app: s2i-dotnetcore-ex &lt;/pre&gt; &lt;p&gt;Note that the configuration includes the interval for monitoring, which in this case is set to &lt;code&gt;30s&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;All that&amp;#8217;s left to do is add the monitor:&lt;/p&gt; &lt;pre&gt;$ oc apply -f example-app-service-monitor.yaml &lt;/pre&gt; &lt;h2&gt;Querying Prometheus&lt;/h2&gt; &lt;p&gt;Now that Prometheus is monitoring our application, we can look at the metrics we&amp;#8217;ve collected. To start, open the OpenShift web user interface (UI) and go to the &lt;b&gt;Advanced &amp;#62; Metrics&lt;/b&gt; page. On this page, we can execute Prometheus queries. &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/prometheus/latest/querying/basics/"&gt;PromQL&lt;/a&gt; is the Prometheus Query Language and offers a simple, expressive language to query the time series that Prometheus collected.&lt;/p&gt; &lt;p&gt;As an example, we’ll use a query for calculating the 99% quantile response time of the .NET application service:&lt;/p&gt; &lt;pre&gt;histogram_quantile(0.99, sum by(le) (rate(http_request_duration_seconds_bucket[5m])))*1000 &lt;/pre&gt; &lt;p&gt;Figure 1 shows the response-time graph generated by Prometheus.&lt;/p&gt; &lt;div id="attachment_728097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png"&gt;&lt;img aria-describedby="caption-attachment-728097" class="wp-image-728097" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png" alt="A histogram graphs and display a .NET application service's 99% quantile response time." width="640" height="594" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png 724w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot-300x278.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-728097" class="wp-caption-text"&gt;Figure 1: A histogram graphs a .NET application service&amp;#8217;s 99% quantile response time.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;PromQL queries&lt;/h3&gt; &lt;p&gt;In case you&amp;#8217;re not familiar with PromQL, let&amp;#8217;s dissect this query. We&amp;#8217;re using the &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric from the &lt;code&gt;http_request_duration_seconds&lt;/code&gt; histogram that we saw under the &lt;code&gt;/metrics&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Because these values are ever-incrementing counters, we apply the &lt;code&gt;rate&lt;/code&gt; operation over a five-minute window. This gives us the response-time change over the last five minutes. The &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric is split into a number of time series (per &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and so on). We don&amp;#8217;t care about these individual series, so we will sum them up. We add the &lt;code&gt;by (le)&lt;/code&gt; argument to maintain the separate buckets that make up the histogram. We use &lt;code&gt;histogram_quantile&lt;/code&gt; to obtain the 99% quantile value, and multiply by &lt;code&gt;1000&lt;/code&gt; to get the time in milliseconds.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you&amp;#8217;ve learned about using Prometheus to monitor .NET Core applications that are deployed on Kubernetes. If you wanted to continue with the example, you could use the metrics collected by Prometheus to &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html#creating-alerting-rules_monitoring-your-own-services"&gt;generate alerts&lt;/a&gt; and view them in one or more &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/visualization/grafana/"&gt;Grafana dashboards&lt;/a&gt;. If you&amp;#8217;re curious, check out OpenShift 4.3&amp;#8217;s support for &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/cluster_monitoring/prometheus-alertmanager-and-grafana.html"&gt;accessing Prometheus, the Alerting UI, and Grafana&lt;/a&gt; via the web console.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#038;title=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" data-a2a-url="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/" data-a2a-title="Monitoring .NET Core applications on Kubernetes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/"&gt;Monitoring .NET Core applications on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UwQZnMiqjfY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Prometheus is an open source monitoring solution that collects metrics from the system and its applications. As a developer, you can query these metrics and use them to create alerts, which you can use as a source for dashboards. One example would be using Prometheus metrics with Grafana. In this article, I show you how [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/"&gt;Monitoring .NET Core applications on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">728067</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-08-05T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/</feedburner:origLink></entry><entry><title>Voxxed Days Milan 2020 - cancelled, onwards to 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZYxkJVHIRUk/voxxed-days-milan-2020-cancelled.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-voxxed_days_milan_2020_cancelled_onwards_to_2021</id><updated>2020-08-05T07:47:05Z</updated><published>2020-08-05T05:00:00Z</published><content type="html">&lt;span style="background-color: white;"&gt;&lt;div class="separator" style="clear: both; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-align: left;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6TNNutcYkCM/Xypiv3eP9ZI/AAAAAAAAxVA/NBkJOndOlDwB-bsyvKkmfVXadCLxYXb8ACNcBGAsYHQ/s997/Screenshot%2B2020-08-05%2Bat%2B09.33.02.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="339" data-original-width="997" height="109" src="https://1.bp.blogspot.com/-6TNNutcYkCM/Xypiv3eP9ZI/AAAAAAAAxVA/NBkJOndOlDwB-bsyvKkmfVXadCLxYXb8ACNcBGAsYHQ/w320-h109/Screenshot%2B2020-08-05%2Bat%2B09.33.02.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Back in &lt;a href="https://www.schabell.org/2020/03/voxxed-days-milan-2020-5-questions-everyone-ignores-microservices-accepted.html" target="_blank"&gt;March I wrote an article&lt;/a&gt; about being accepted to speak at &lt;a href="https://voxxeddays.com/milan/" target="_blank"&gt;Voxxed Days Milano 2020&lt;/a&gt;, which should have been in May 2020.&amp;nbsp;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Then it got rescheduled to September 2002. Not really a surprise seeing as the world was pretty much on fire at the time with virus concerns and spreading across most countries in Europe.&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;font color="#444444" face="Arial, Tahoma, Helvetica, FreeSans, sans-serif"&gt;&lt;span style="font-size: 13px;"&gt;Now we are approaching the September event and many conferences have chosen to either go online and provide a virtual event or to cancel entirely.&lt;/span&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Today I got the message from the organization that they have decided to cancel the 2020 event and push all focus towards a 2021 event.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;font color="#444444" face="Arial, Tahoma, Helvetica, FreeSans, sans-serif"&gt;&lt;i&gt;&lt;div style="font-size: 13px;"&gt;&lt;b&gt;Subject: Voxxed Days Milano 2020 is cancelled&lt;/b&gt;&lt;/div&gt;&lt;div style="font-size: 13px;"&gt;It is with real sadness that we are announcing the cancellation of this year’s Voxxed Days Milano. Although the Covid-19 situation in Lombardy is improved a lot compared to few months ago, the numbers are still not going down as they should. People are worried and nobody can accurately predict how the situation will evolve in the next 2 months.&amp;nbsp;&lt;/div&gt;&lt;div style="font-size: 13px;"&gt;We are developers but we are humans after all, and we feel fear, doubt, discomfort and a whole range of heightened emotions. It is totally fine for us to have these feelings, and it would be wrong of us to ignore them. We cannot ask people to gather for an event which we cannot currently know will be safe for everyone. Therefore the organization of VDM20 (September edition) is cancelled.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-size: 13px;"&gt;This decision will hurt us financially but we think it is the right thing to do. We already received great messages of support and trust from our community that make us believe we will come back stronger as soon as possible. For now, we are targeting May 2021 as the next event date.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/i&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;This means my talk below will have to be resubmit, fingers crossed and maybe we can have a fun time talking about all things everyone is ignoring with microservices in 2021!&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;I'm really looking forward to visiting this wonderful city full of history and vibrant life, but there is one thing that might be throwing a bit of a wrench in the works.&lt;/span&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;a name="more" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;/a&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;The talk that got accepted is an in depth look at the challenges that rise to the top of organizations implementing microservices.&lt;/span&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;5 Questions Everyone Ignores with Microservices&lt;/h3&gt;&lt;i style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. Funny enough, when discussing the development impact while transitioning to microservices, there are five questions that keep popping up. This session covers the questions that everyone should ask about microservices. Join us for an hour of power, where real life developer experiences are used to highlight the lessons we're all learning as we transition our integration infrastructure into modern day microservices.&lt;/i&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Hoping that the people of Milan remain safe and that we can get through to a successful Voxxed Days 2021.&lt;/span&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/wNMB1la1ixA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZYxkJVHIRUk" height="1" width="1" alt=""/&gt;</content><summary>Back in March I wrote an article about being accepted to speak at Voxxed Days Milano 2020, which should have been in May 2020.  Then it got rescheduled to September 2002. Not really a surprise seeing as the world was pretty much on fire at the time with virus concerns and spreading across most countries in Europe. Now we are approaching the September event and many conferences have chosen to eithe...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-08-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/wNMB1la1ixA/voxxed-days-milan-2020-cancelled.html</feedburner:origLink></entry><entry><title>HTTP-based Kafka messaging with Red Hat AMQ Streams</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eYchotbaV3M/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Microservices" /><category term="Stream Processing" /><category term="amq streams" /><category term="Apache Kafka" /><category term="log aggregation" /><category term="openshift" /><category term="Strimzi" /><author><name>Antonio Gagliardi</name></author><id>https://developers.redhat.com/blog/?p=720187</id><updated>2020-08-04T07:00:19Z</updated><published>2020-08-04T07:00:19Z</published><content type="html">&lt;p&gt;Apache Kafka is a rock-solid, super-fast, event streaming backbone that is not only for &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt;. It&amp;#8217;s an enabler for many use cases, including activity tracking, log aggregation, stream processing, change-data capture, &lt;a href="https://developers.redhat.com/blog/category/iot/"&gt;Internet of Things&lt;/a&gt; (IoT) telemetry, and more.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/amq-streams-datasheet"&gt;Red Hat AMQ Streams&lt;/a&gt; makes it easy to run and manage Kafka natively on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. AMQ Streams&amp;#8217; upstream project, &lt;a target="_blank" rel="nofollow" href="https://strimzi.io/"&gt;Strimzi&lt;/a&gt;, does the same thing for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Setting up a Kafka cluster on a developer&amp;#8217;s laptop is fast and easy, but in some environments, the client setup is harder. Kafka uses a TCP/IP-based proprietary protocol and has &lt;a target="_blank" rel="nofollow" href="https://cwiki.apache.org/confluence/display/KAFKA/Clients"&gt;clients&lt;/a&gt; available for many different programming languages. Only the JVM client is on Kafka&amp;#8217;s main codebase, however.&lt;/p&gt; &lt;p&gt;&lt;span id="more-720187"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In many scenarios, it is difficult, impossible, or we just don&amp;#8217;t want to put in the effort to install and set up a Kafka client manually. A hidden gem in AMQ Streams can be a big help to developers who want to access a Kafka client, but don&amp;#8217;t want the bother of setting one up. In this article, you will get started with &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.5/html/using_amq_streams_on_openshift/kafka-bridge-concepts-str"&gt;Red Hat AMQ Streams Kafka Bridge&lt;/a&gt;, a RESTful interface for producing and consuming Kafka topics using HTTP/1.1.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The Kafka HTTP bridge is available from &lt;a&gt;AMQ Streams 1.3&lt;/a&gt; and &lt;a&gt;Strimzi 0.12&lt;/a&gt; forward.&lt;/p&gt; &lt;p&gt;Figure 1 shows AMQ Streams Kafka Bridge in a typical Apache Kafka messaging system.&lt;/p&gt; &lt;div id="attachment_755417" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-755417" class="wp-image-755417 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-1024x683.png" alt="A diagram showing AMQ Streams Kafka Bridge in an Apache Kafka messaging system on Red Hat OpenShift." width="640" height="427" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-300x200.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-768x512.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-755417" class="wp-caption-text"&gt;Figure 1: AMQ Streams Kafka Bridge in a typical Apache Kafka messaging system.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;!--more--&gt;&lt;/p&gt; &lt;h2&gt;Getting started with AMQ Streams Kafka Bridge&lt;/h2&gt; &lt;p&gt;To use AMQ Streams, you need an OpenShift cluster, 3.11 or newer, and a user with the cluster-admin role.&lt;/p&gt; &lt;p&gt;I tested the code for this article on a developer laptop with &lt;a&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7.6 and &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC) 1.9 on OpenShift 4.3.1. I suggest running CRC with at least 16GB of memory and eight cores, but it&amp;#8217;s up to you. (Just don&amp;#8217;t be too stingy; otherwise, you might have issues starting the Kafka cluster.)&lt;/p&gt; &lt;h3&gt;The five-minute installation&lt;/h3&gt; &lt;p&gt;First, we will install a Kafka custom resource definition (CRD) and role-based access control (RBAC) on a dedicated project named &lt;code&gt;kafka&lt;/code&gt;. Then, we&amp;#8217;ll install a Kafka cluster in the project, which we&amp;#8217;ll name &lt;code&gt;my-kafka-cluster&lt;/code&gt;.&lt;/p&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol&gt; &lt;li&gt;Download the AMQ Streams 1.4 &lt;a href="https://developers.redhat.com/download-manager/file/amq-streams-1.4.0-ocp-install-examples.zip"&gt;OpenShift Container Platform (OCP) installation and examples&lt;/a&gt;. Unzip the file and move it inside the folder &lt;code&gt;amq-streams-1.4.0-ocp-install-examples&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Log in to your cluster using the command &lt;code&gt;cluster-admin(CRC) oc login -u kubeadmin [...]&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Install the Cluster Operator into the &lt;code&gt;kafka&lt;/code&gt; project: &lt;pre&gt;$ sed -i 's/namespace: .*/namespace: kafka/' install/cluster-operator/*RoleBinding*.yaml $ oc new-project kafka $ oc project kafka $ oc apply -f install/cluster-operator/ &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Install the Topic and Entity Operators in a Kafka cluster project: &lt;pre&gt;$ oc new-project my-kafka-project $ oc set env deploy/strimzi-cluster-operator STRIMZI_NAMESPACE=kafka,my-kafka-project -n kafka $ oc apply -f install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml -n my-kafka-project $ oc apply -f install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml -n my-kafka-project $ oc apply -f install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml -n my-kafka-project $ oc apply -f install/strimzi-admin &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Create the Kafka cluster: &lt;pre&gt;$ oc project my-kafka-project $ cat &amp;#60;&amp;#60; EOF | $ oc create -f - apiVersion: kafka.strimzi.io/v1beta1 kind: Kafka metadata: name: my-cluster spec: kafka: replicas: 3 listeners: plain: {} tls: {} external: type: route storage: type: ephemeral zookeeper: replicas: 3 storage: type: ephemeral entityOperator: topicOperator: {} EOF &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Wait for the cluster to start: &lt;pre&gt;$ oc wait kafka/my-cluster --for=condition=Ready --timeout=300s -n my-kafka-project &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;That&amp;#8217;s it! The Kafka cluster is up and running.&lt;/p&gt; &lt;h3&gt;Install AMQ Streams Kafka Bridge&lt;/h3&gt; &lt;p&gt;Installing the Kafka HTTP bridge for AMQ Streams requires just one YAML file:&lt;/p&gt; &lt;pre&gt;$ oc apply -f examples/kafka-bridge/kafka-bridge.yaml &lt;/pre&gt; &lt;p&gt;Once you have installed the file, the Cluster Operator will create a deployment, a service, and a pod.&lt;/p&gt; &lt;h3&gt;Expose the bridge outside of OCP&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ve installed and configured the bridge, but we can only access it inside the cluster. Use the following command to expose it outside of OpenShift:&lt;/p&gt; &lt;pre&gt;$ oc expose service my-bridge-bridge-service&lt;/pre&gt; &lt;p&gt;The bridge itself doesn&amp;#8217;t provide any security, but we can secure it with other methods such as network policies, reverse proxy (OAuth), and Transport Layer Security (TLS) termination. If we want a more full-featured solution, we can use the bridge with a &lt;a&gt;3scale API Gateway&lt;/a&gt; that includes TLS authentication and authorization as well as metrics, rate limits, and billing.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The Kafka HTTP bridge supports TLS or Simple Authentication and Security Layer (SASL)-based authentication, and TLS-encrypted connections when connected to a Kafka cluster. It&amp;#8217;s also possible to install many bridges, choosing between internal or external implementations, each with different authentication mechanisms and different access control lists.&lt;/p&gt; &lt;h3&gt;Verify the installation&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s check to see whether the bridge is available:&lt;/p&gt; &lt;pre&gt;$ BRIDGE=$(oc get routes my-bridge-bridge-service -o=jsonpath='{.status.ingress[0].host}{"\n"}') curl -v $BRIDGE/healthy &lt;/pre&gt; &lt;p&gt;Note that the bridge exposes the REST API as OpenAPI-compatible:&lt;/p&gt; &lt;pre&gt;$ curl -X GET $BRIDGE/openapi&lt;/pre&gt; &lt;h2&gt;Using AMQ Streams Kafka Bridge&lt;/h2&gt; &lt;p&gt;At this point, everything is ready to produce and consume messages using the AMQ Streams Kafka Bridge. We&amp;#8217;ll go through a quick demonstration together.&lt;/p&gt; &lt;h3&gt;Produce and consume system logs&lt;/h3&gt; &lt;p&gt;Log ingestion is one of the common use cases for Kafka. We are going to fill a Kafka topic with our system logs, but they can come from any system that supports HTTP. Likewise, the logs can be consumed by other systems.&lt;/p&gt; &lt;p&gt;Start by creating a topic and naming it &lt;code&gt;machine-log-topic&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#60;&amp;#60; EOF | $ oc create -f - apiVersion: kafka.strimzi.io/v1beta1 kind: KafkaTopic metadata: name: machine-log-topic labels: strimzi.io/cluster: "my-cluster" spec: partitions: 3 replicas: 3 EOF &lt;/pre&gt; &lt;p&gt;Then, fill the topic with data using &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;jq&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ journalctl --since "5 minutes ago" -p "emerg".."err" -o json-pretty | \ jq --slurp '{records:[.[]|{"key":.__CURSOR,value: .}]}' - | \ curl -X POST $BRIDGE/topics/machine-log-topic -H 'content-type: application/vnd.kafka.json.v2+json' -d @- &lt;/pre&gt; &lt;p&gt;Usually, the content type is &lt;code&gt;application/vnd.kafka.json.v2+json&lt;/code&gt;, but it&amp;#8217;s also available as &lt;code&gt;application/vnd.kafka.binary.v2+json&lt;/code&gt; for the binary data format. A Base64 value is expected if you use the binary data format.&lt;/p&gt; &lt;h3&gt;Consuming messages&lt;/h3&gt; &lt;p&gt;Now we have messages to consume. Before we can consume from a topic, we have to add our consumer to a consumer group. Then, we must subscribe the consumer to the topic. In this example, we include the consumer &lt;code&gt;my-consumer&lt;/code&gt; in the consumer group &lt;code&gt;my-group&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ CONS_URL=$(curl -s -X POST $BRIDGE/consumers/my-group -H 'content-type: application/vnd.kafka.v2+json' \ -d '{ "name": "my-consumer", "format": "json", "auto.offset.reset": "earliest", "enable.auto.commit": true }' | \ jq .base_uri | \ sed 's/\"//g') &lt;/pre&gt; &lt;p&gt;Next, we subscribe it to the topic &lt;code&gt;my-topic&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ curl -v $CONS_URL/subscription -H 'content-type: application/vnd.kafka.v2+json' -d '{"topics": ["my-topic"]} &lt;/pre&gt; &lt;p&gt;And now we are ready to consume:&lt;/p&gt; &lt;pre&gt;$ curl -X GET $CONS_URL/records -H 'accept: application/vnd.kafka.json.v2+json' | jq &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Integrating old but good services or devices in a bleeding-edge microservice architecture can be challenging. But if you can live without hyperspeed messaging (which these older services provide), the Apache Kafka HTTP bridge allows those services—with just a little bit of HTTP/1.1—to leverage the power of the Apache Kafka.&lt;/p&gt; &lt;p&gt;The Apache Kafka HTTP bridge is easy to set up and integrate using its REST API, and it grants unlimited use as an HTTP transport. In this article, I&amp;#8217;ve shown you a quick installation procedure for deploying AMQ Streams Kafka Bridge on OCP, then demonstrated a producer-consumer messaging scenario using logging data over HTTP.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#038;title=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" data-a2a-url="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/" data-a2a-title="HTTP-based Kafka messaging with Red Hat AMQ Streams"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/"&gt;HTTP-based Kafka messaging with Red Hat AMQ Streams&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eYchotbaV3M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Kafka is a rock-solid, super-fast, event streaming backbone that is not only for microservices. It&amp;#8217;s an enabler for many use cases, including activity tracking, log aggregation, stream processing, change-data capture, Internet of Things (IoT) telemetry, and more. Red Hat AMQ Streams makes it easy to run and manage Kafka natively on Red Hat OpenShift. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/"&gt;HTTP-based Kafka messaging with Red Hat AMQ Streams&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">720187</post-id><dc:creator>Antonio Gagliardi</dc:creator><dc:date>2020-08-04T07:00:19Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/</feedburner:origLink></entry><entry><title>Authorizing multi-language microservices with Louketo Proxy</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0Q-s-6VibSo/" /><category term="DevOps" /><category term="Linux" /><category term="Microservices" /><category term="Security" /><category term="deployment pattern" /><category term="keycloak" /><category term="Louketo Proxy" /><category term="man in the middle" /><category term="openid connect" /><category term="openshift" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=735167</id><updated>2020-08-03T07:00:09Z</updated><published>2020-08-03T07:00:09Z</published><content type="html">&lt;p&gt;What if you needed to provide authentication to several &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; that were written in different languages? You could use &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost"&gt;Red Hat Single Sign-On&lt;/a&gt; (SSO) to handle the authentication, but then you would still need to integrate each microservice with &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org"&gt;Keycloak&lt;/a&gt;. Wouldn&amp;#8217;t it be great if a service could just handle the authentication flow and pass the user&amp;#8217;s details directly to your microservices? In this article, I introduce a service that does just that!&lt;/p&gt; &lt;h2&gt;Louketo Proxy&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/louketo/louketo-proxy" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Louketo Proxy&lt;/a&gt; (previously Keycloak-Gatekeeper) integrates with &lt;a target="_blank" rel="nofollow" href="https://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; (OIDC)-compliant providers like Keycloak. Louketo Proxy hands off the authentication to Keycloak, and then passes the authorization and user details to a microservice as header attributes. The diagram in Figure 1 illustrates the authentication flow between Louketo Proxy, Keycloak, and a microservice.&lt;/p&gt; &lt;div id="attachment_735537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1.png"&gt;&lt;img aria-describedby="caption-attachment-735537" class="wp-image-735537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-1024x839.png" alt="A diagram of Louketo Proxy's authentication flow." width="640" height="524" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-1024x839.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-300x246.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-768x629.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1.png 1291w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735537" class="wp-caption-text"&gt;Figure 1: Louketo Proxy authenticates a microservice with Keycloak.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With Louketo Proxy, you don&amp;#8217;t need to worry about supporting the authentication flow across the different languages used for your microservices. As an added benefit, Louketo Proxy makes it easy to provide authentication to legacy off-the-shelf applications that do not support OIDC.&lt;/p&gt; &lt;h2&gt;Louketo Proxy in OpenShift&lt;/h2&gt; &lt;p&gt;Before getting started, it is worthwhile to explore the architecture that is required to run Louketo Proxy and a microservice together. In a &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; deployment, the usual pattern is for a single pod to run a single container, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_735347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod.png"&gt;&lt;img aria-describedby="caption-attachment-735347" class="wp-image-735347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-1024x521.png" alt="A diagram of an OpenShift deployment where one pod runs one container." width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-768x391.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod.png 1519w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735347" class="wp-caption-text"&gt;Figure 2: A typical OpenShift deployment where one pod runs one container.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For our Louketo Proxy pattern to work, we need one pod to run two containers. Louketo Proxy and the microservice will reside within the same pod and share the resources associated with that pod, including networking. To prevent conflict, Louketo Proxy and the microservice will need to listen on different network ports. The Louketo Proxy instance also must be able to communicate with the microservice without traversing any network links. This setup reduces latency and makes it difficult to execute a man-in-the-middle (MITM) attack, which improves the security model. Figure 3 shows the OpenShift deployment pattern for Louketo Proxy with microservices.&lt;/p&gt; &lt;div id="attachment_735337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar.png"&gt;&lt;img aria-describedby="caption-attachment-735337" class="wp-image-735337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-1024x572.png" alt="A diagram of the OpenShift deployment with the Louketo Proxy instance and microservice running in the same pod." width="640" height="358" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-1024x572.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-768x429.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735337" class="wp-caption-text"&gt;Figure 3: The Louketo Proxy instance and microservice run in the same pod and share the pod&amp;#8217;s resources.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Normally, we would create a service bound to the microservice and expose it via a route. In this case, we only create a service bound to the Louketo Proxy instance and expose it via a route. Consumers will only ever access the microservice via the Louketo Proxy instance. This arrangement enforces the security model.&lt;/p&gt; &lt;h2&gt;Getting started with Louketo Proxy&lt;/h2&gt; &lt;p&gt;For this example, we deploy a simple &lt;a target="_blank" rel="nofollow" href="https://palletsprojects.com/p/flask/"&gt;Flask application&lt;/a&gt; that exposes the authentication headers passed along by Louketo Proxy. If you wish, you can run the example code on &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC). Otherwise, you will need to update the code to run on your OpenShift cluster.&lt;/p&gt; &lt;h3&gt;Step 1: Deploy Keycloak&lt;/h3&gt; &lt;p&gt;The first step is to deploy Keycloak on CodeReady Containers. To fast-track the process, run the following commands from a terminal. These will create a project on OpenShift, deploy Keycloak, and create a route:&lt;/p&gt; &lt;pre&gt;$ oc new-project sso-test $ oc new-app --name sso --docker-image=quay.io/keycloak/keycloak -e KEYCLOAK_USER='admin' -e KEYCLOAK_PASSWORD='louketo-demo' -e PROXY_ADDRESS_FORWARDING='true’ $ oc create route edge --service=sso --hostname=sso.apps-crc.testing &lt;/pre&gt; &lt;h3&gt;Create and configure the Flask client&lt;/h3&gt; &lt;p&gt;Browse to &lt;b&gt;https://sso.apps-crc.testing&lt;/b&gt; and log in with the username &lt;code&gt;admin&lt;/code&gt; and the password &lt;code&gt;louketo-demo&lt;/code&gt;. Once there, select&lt;strong&gt; Clients&lt;/strong&gt; from the left-hand menu and create a new client with the fields shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_735277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png"&gt;&lt;img aria-describedby="caption-attachment-735277" class="wp-image-735277" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png" alt="A screenshot of the Add Client dialog." width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png 734w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client-300x121.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735277" class="wp-caption-text"&gt;Figure 4: Add a new Flask client.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After you have created the client, you will have the option to switch the client access type from public to confidential, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_735327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png"&gt;&lt;img aria-describedby="caption-attachment-735327" class="wp-image-735327" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png" alt="A screenshot of the Settings dialog in the Flask UI." width="640" height="581" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png 582w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential-300x272.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735327" class="wp-caption-text"&gt;Figure 5: Use the Settings dialog to switch client access to confidential.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;CodeReady Containers will generate a client secret, which you can view under the &lt;strong&gt;Credentials&lt;/strong&gt; tab shown in Figure 6. You will need the secret when we configure Louketo Proxy, so make a note of it.&lt;/p&gt; &lt;div id="attachment_735317" style="width: 514px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png"&gt;&lt;img aria-describedby="caption-attachment-735317" class="wp-image-735317 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png" alt="A screenshot of the Credentials dialog in the Flask UI." width="504" height="231" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret-300x138.png 300w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735317" class="wp-caption-text"&gt;Figure 6: Check under the Credentials tab to see the generated client secret.&lt;/p&gt;&lt;/div&gt; &lt;h4&gt;Configure the mappers&lt;/h4&gt; &lt;p&gt;At this point, we are still configuring the Flask client. Select the &lt;strong&gt;Mappers&lt;/strong&gt; tab and add two mappers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Groups&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Name: groups&lt;/li&gt; &lt;li&gt;Mapper type: Group Membership&lt;/li&gt; &lt;li&gt;Token claim name: groups&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;b&gt;Audience&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Name: audience&lt;/li&gt; &lt;li&gt;Mapper type: Audience&lt;/li&gt; &lt;li&gt;Included client audience: flask&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 7 shows the configuration for the Audience mapper.&lt;/p&gt; &lt;div id="attachment_735627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience.png"&gt;&lt;img aria-describedby="caption-attachment-735627" class="wp-image-735627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-1024x475.png" alt="A screenshot of the dialog to create the Audience mapper." width="640" height="297" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-1024x475.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-768x356.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735627" class="wp-caption-text"&gt;Figure 7: Configure the Flask client&amp;#8217;s Audience mapper.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 8 shows the configuration for the Groups mapper.&lt;/p&gt; &lt;div id="attachment_735637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups.png"&gt;&lt;img aria-describedby="caption-attachment-735637" class="wp-image-735637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-1024x519.png" alt="A screenshot of the dialog to create the Groups mapper." width="640" height="324" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-1024x519.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-768x389.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735637" class="wp-caption-text"&gt;Figure 8: Configure the Flask client&amp;#8217;s group-membership mapper.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure the user groups&lt;/h3&gt; &lt;p&gt;Now select &lt;b&gt;Groups&lt;/b&gt; from the left-hand menu and add two groups:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;basic_user&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Configure the user&lt;/h3&gt; &lt;p&gt;Again from the left-hand menu, select &lt;b&gt;Users&lt;/b&gt; and add a user. Be sure to enter an email and set a password for the user, then add the user to the &lt;code&gt;basic_user&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; groups that you just created. Next, we&amp;#8217;ll configure Louketo Proxy and the example application.&lt;/p&gt; &lt;h2&gt;Step 2: Configure Louketo Proxy and the application&lt;/h2&gt; &lt;p&gt;We will need the following details from our Keycloak server (note that you will enter the client secret that you saved in Step 1):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Client ID: flask&lt;/li&gt; &lt;li&gt;Client secret&lt;/li&gt; &lt;li&gt;Discovery URL: https://sso.apps-crc.testing/auth/realms/master&lt;/li&gt; &lt;li&gt;Groups: basic_user&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Create the ConfigMaps&lt;/h3&gt; &lt;p&gt;First, we&amp;#8217;ll use a ConfigMap to configure Louketo Proxy. Louketo Proxy supports presenting custom pages (sign-in pages, forbidden pages, and so on) that can match the look-and-feel of the associated microservice. For our use case, we will redirect all unauthenticated requests to Keycloak. Make sure that you replace the &lt;code&gt;client-secret&lt;/code&gt; in the following ConfigMap with the one generated by Keycloak:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: ConfigMap metadata: name: gatekeeper-config data: keycloak-gatekeeper.conf: |+ # The URL for retrieving the OpenID configuration - normally the /auth/realms/ discovery-url: https://sso.apps-crc.testing/auth/realms/master # skip tls verify skip-openid-provider-tls-verify: true # the client ID for the 'client' application client-id: flask # the secret associated with the 'client' application client-secret: &amp;#60; Paste Client Secret here &amp;#62; # the interface definition you wish the proxy to listen to, all interfaces are specified as ':', unix sockets as unix://| listen: :3000 # whether to enable refresh-tokens enable-refresh-tokens: true # the location of a certificate you wish the proxy to use for TLS support tls-cert: # the location of a private key for TLS tls-private-key: # the redirection URL, essentially the site url, note: /oauth/callback is added at the end redirection-url: https://flask.apps-crc.testing secure-cookie: false # the encryption key used to encode the session state encryption-key: nkOfcT6jYCsXFuV5YRkt3OvY9dy1c0ck # the upstream endpoint which we should proxy request upstream-url: http://127.0.0.1:8080/ resources: - uri: /* groups: - basic_user &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll create a ConfigMap for the Flask application. Before we can create the ConfigMap, we need to obtain the public key for Keycloak. To get the public key, log in to the Keycloak admin page and go to&lt;b&gt; Realm Settings &amp;#62; Keys&lt;/b&gt;. From there, select the &lt;b&gt;RS256 public key&lt;/b&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_735307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key.png"&gt;&lt;img aria-describedby="caption-attachment-735307" class="wp-image-735307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-1024x287.png" alt="A screenshot of the option to select the RSA-generated public key." width="640" height="179" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-1024x287.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-300x84.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-768x215.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key.png 1041w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735307" class="wp-caption-text"&gt;Figure 9: Select the RSA-generated public key.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The Flask application uses this public key to check the validity of the JSON Web Token (JWT) that Louketo Proxy passes. Here is the ConfigMap for the Flask application:&lt;/p&gt; &lt;pre&gt;kind: ConfigMap apiVersion: v1 metadata: name: sso-public-key data: PUBLIC_KEY: | -----BEGIN PUBLIC KEY----- &amp;#60; Paste in the Keycloak public key here &amp;#62; -----END PUBLIC KEY----- &lt;/pre&gt; &lt;h3&gt;Bind the service&lt;/h3&gt; &lt;p&gt;Now we need to bind a service to the Louketo Proxy listening port. We defined the listening port in Louketo Proxy&amp;#8217;s ConfigMap under the &lt;code&gt;listen&lt;/code&gt; parameter. Here is the service binding:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Service metadata: name: flask spec: ports: - port: 3000 protocol: TCP targetPort: 3000 selector: app: flask &lt;/pre&gt; &lt;h3&gt;Configure the route&lt;/h3&gt; &lt;p&gt;We use routes to expose our services to consumers. In this case, we are exposing the Louketo Proxy service and the terminating TLS on the router:&lt;/p&gt; &lt;pre&gt;kind: Route apiVersion: route.openshift.io/v1 metadata: name: flask spec: host: flask.apps-crc.testing to: kind: Service name: flask weight: 100 port: targetPort: 3000 tls: termination: edge insecureEdgeTerminationPolicy: Redirect wildcardPolicy: None &lt;/pre&gt; &lt;h3&gt;Apply the DeploymentConfig&lt;/h3&gt; &lt;p&gt;Now that we have created the ConfigMaps, service, and route we can apply our OpenShift DeploymentConfig. If you look carefully at the configuration below, you will see that we are deploying two containers within the same DeploymentConfig. As I said at the beginning of this article, our architecture calls for deploying two containers within the same pod:&lt;/p&gt; &lt;pre&gt;kind: DeploymentConfig apiVersion: apps.openshift.io/v1 metadata: name: flask labels: app: flask spec: strategy: type: Rolling replicas: 1 selector: app: flask template: metadata: labels: app: flask spec: containers: - name: flask image: quay.io/rarm_sa/flask-sso-gatekeeper ports: - containerPort: 8080 protocol: TCP envFrom: - configMapRef: name: sso-public-key imagePullPolicy: IfNotPresent - name: gatekeeper image: 'quay.io/louketo/louketo-proxy' args: - --config=/etc/keycloak-gatekeeper.conf ports: - containerPort: 3000 name: gatekeeper volumeMounts: - name: gatekeeper-config mountPath: /etc/keycloak-gatekeeper.conf subPath: keycloak-gatekeeper.conf volumes: - name : gatekeeper-config configMap: name: gatekeeper-config &lt;/pre&gt; &lt;h2&gt;Test the configuration&lt;/h2&gt; &lt;p&gt;To test your configuration, browse to the example application at &lt;b&gt;https://flask.apps-crc.testing&lt;/b&gt;. You will be redirected to Keycloak and presented with a login screen like the one in Figure 10. Enter the username and password for your application user.&lt;/p&gt; &lt;div id="attachment_735287" style="width: 566px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png"&gt;&lt;img aria-describedby="caption-attachment-735287" class="wp-image-735287 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png" alt="A screenshot of the Keycloak login screen." width="556" height="501" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png 556w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/login-300x270.png 300w" sizes="(max-width: 556px) 100vw, 556px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735287" class="wp-caption-text"&gt;Figure 10: The Keycloak login screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you have authenticated the user, you will be redirected to an application page that returns a JSON file. The file exposes the headers passed along by Louketo Proxy, as shown in Figure 11.&lt;/p&gt; &lt;div id="attachment_735587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask.png"&gt;&lt;img aria-describedby="caption-attachment-735587" class="wp-image-735587 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-1024x720.png" alt="A screenshot of the JSON file." width="640" height="450" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-1024x720.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-300x211.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-768x540.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735587" class="wp-caption-text"&gt;Figure 11: The Flask application returns a JSON file that exposes the Louketo Proxy headers.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article introduced you to Louketo Proxy, a simple way to provide authentication for your applications without having to code your own OpenID Connect clients within your microservices. As always, I welcome your questions and feedback in the comments.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#038;title=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" data-a2a-url="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/" data-a2a-title="Authorizing multi-language microservices with Louketo Proxy"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/"&gt;Authorizing multi-language microservices with Louketo Proxy&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0Q-s-6VibSo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;What if you needed to provide authentication to several microservices that were written in different languages? You could use Red Hat Single Sign-On (SSO) to handle the authentication, but then you would still need to integrate each microservice with Keycloak. Wouldn&amp;#8217;t it be great if a service could just handle the authentication flow and pass [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/"&gt;Authorizing multi-language microservices with Louketo Proxy&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">735167</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2020-08-03T07:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/</feedburner:origLink></entry></feed>
